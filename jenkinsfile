pipeline {
    agent any
    
    environment {
        registry = 'amfaa/crud-frontend'   //                                       dockerHubAccountName/dockerImageName
        registryCredential = 'dockerhub'
        imagename = "amfaa/crud-frontend"
        dockerImage = ''
    }


    stages {
        stage('Git Cloning') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/Amfaa/crud_frontend.git']]])
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script{
                	  dockerImage = docker.build registry + ":BUILD_NUMBER"
                	   //dockerImage = docker.build imagename
		        }
            }
            
        }
        
        stage('Push To DockerHub') {
            steps {
                script{
                	  withDockerRegistry(credentialsId: 'dockerhub') {
                	  dockerImage.push()
                	  }
                	  
		        }
            }
            
        }
        
        stage('Clean up activity at jenkins-salve'){
            steps{
                sh 'docker system prune --all'
            }
        }
        
        //Remove docker containers with image
        stage ('Removing unused images and container @ Host'){
            agent {
                label 'Host-slave'
            }
            steps{
                sh 'docker system prune --all'
                sh """
                    docker ps -a \
                    | awk '{ print \$1,\$2 }' \
                    | grep amfaa/crud-frontend \
                    | awk '{print \$1 }' \
                    | xargs -I {} docker rm -f {}
                    """
            }
        }
        
        
        stage('DEPLOY TO DOCKER HOST') {
             agent {
                 label 'Host-slave'
             }
            steps {
                
                script{
                	  withDockerRegistry(credentialsId: 'dockerhub') {
                	  dockerImage.pull()
                	  sh 'docker run -d --expose=3000 -p=3000:3000 "${imagename}:latest"'
                	  }
                }
            }
            
        }
        
    }
}
